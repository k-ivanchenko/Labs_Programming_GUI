#ifndef HEADER_H_INCLUDED
#define HEADER_H_INCLUDED
#include <cmath>
#include <math.h>

using namespace std;

class Triangle
{
private:
    int a,b, c;


public:
  /*  Triangle()
    {
        a(3);
        SetBSide(4);
        SetCSide(5);
    }


    Triangle(const Triangle &triangle):
        a(),b(),c()
        {

            cout<<"Constructed copy work \n"<<endl;
        }

/*/
        Triangle(int _a,int _b,int _c): a(_a),b(_b),c(_c) // напрямую инициализируем переменные-члены класс
        {
        }
        Triangle()
            :a(0),b(0),c(0){}

            ~Triangle(){}
int getA() {return a;}
    int getB() {return b;}
    int getC() {return c;}
  /*  Triangle(int at, int bt, int ct)
    {
       at=a;
       bt=b;
       ct=c;
    }
*/


void setSides()
{   cout<<"\tSide a\t";
        cin>>a;
        cout<<"\tSide b:\t";
        cin>>b;
           cout<<"\Side c:\t";
        cin>>c;

        return 0;
    }

    double getPerimeter()
    {
        return (a+b+c);
    }
    double polperimeter(){
    this->getPerimeter()/2;
    }

    double getSquare(){
    this->polperimetet;
    return sqrt(polperimeter*(polperimeter - a)*(polperimeter - b)*(polperimeter -c));

    }

    double GetHeight()
    {
     this->polperimeter;
         return sqrt(4*polperimeter*((polperimeter-a)*(polperimeter-b)*(polperimeter-c))/(a*a));
    }

    static bool IsExist(int _a, int _b, int _c)
    {
        return ((a + b > c) && (a + c > b) && ( b+ c > a));
    }

};


#endif // HEADER_H_INCLUDED
